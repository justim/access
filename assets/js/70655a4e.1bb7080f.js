(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),i=(n(0),n(88)),s={id:"repositories",title:"Repositories",slug:"/repositories"},o={unversionedId:"repositories",id:"repositories",isDocsHomePage:!1,title:"Repositories",description:"To get the repository associated with an entity, you can call the",source:"@site/../docs/repositories.md",slug:"/repositories",permalink:"/docs/repositories",editUrl:"https://github.com/justim/access/edit/master/website/../docs/repositories.md",version:"current",sidebar:"docs",previous:{title:"Entities",permalink:"/docs/entities"},next:{title:"Queries",permalink:"/docs/queries"}},l=[{value:"Helper methods",id:"helper-methods",children:[{value:"Single result helpers",id:"single-result-helpers",children:[]},{value:"Multiple result helpers",id:"multiple-result-helpers",children:[]},{value:"No result helpers",id:"no-result-helpers",children:[]}]}],c={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"To get the repository associated with an entity, you can call the\n",Object(i.b)("inlineCode",{parentName:"p"},"getRepository")," method on the database instance. This returns a\n",Object(i.b)("inlineCode",{parentName:"p"},"Access\\Repository")," instance."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"$userRepo = $db->getRepository(User::class);\n$user = $userRepo->findOne($userId);\n")),Object(i.b)("p",null,"When the default methods on the database instance are not enough anymore, and\nthe default repository also comes up short, it's time to create a custom\nrepository for an entity to fetch entity with more complex logic. A repository\nis a collection of methods that hide away the query executed to the outside\nworld. For example, if you want a list of all users that have a project\nattached, you create a method called ",Object(i.b)("inlineCode",{parentName:"p"},"findUsersWithProjects")," and define a query\ninside. When you use the repository the only this you know is that you can get a\nlist of users with a project, but how that is achieved does not matter to that\nthe outside, only that you get a list."),Object(i.b)("p",null,"So, let's first create a repository."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php",metastring:'title="UserRepository.php"',title:'"UserRepository.php"'},"use Access\\Repository;\n\nclass UserRepository extends Repository\n{\n}\n")),Object(i.b)("p",null,"By default this repository has no more functionality that the default repository\nalready available for all entities. To make the repository more usefull, let's\nadd a method to it."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php",metastring:'title="UserRepository.php"',title:'"UserRepository.php"'},"use Access\\Query;\nuse Access\\Repository;\n\nclass UserRepository extends Repository\n{\n    public function findUsersWithProjects(): \\Generator\n    {\n        $query = new Query\\Select(User::class);\n        $query->where('has_project = ?', true);\n\n        return $this->select($query);\n    }\n}\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),Object(i.b)("a",{parentName:"h5",href:"queries"},"Queries"))),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"For more information about queries, ",Object(i.b)("a",{parentName:"p",href:"queries"},"you can read all about them here"),"."))),Object(i.b)("h2",{id:"helper-methods"},"Helper methods"),Object(i.b)("p",null,"The pattern is the same each time, you define a method, create a query and\nreturn it with a helper method of the ",Object(i.b)("inlineCode",{parentName:"p"},"Access\\Repository")," class. These methods\ndetermine what gets returned to the user, some simply returning a single\nentities to all kinds of lists."),Object(i.b)("h3",{id:"single-result-helpers"},"Single result helpers"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"selectOne"),": Select a single entity, will set the limit to ",Object(i.b)("inlineCode",{parentName:"p"},"1")," and return the\nfirst result as an entity, or ",Object(i.b)("inlineCode",{parentName:"p"},"null")," if there are no results."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-php"},"public function findSomeUser(int $userId): \\User\n{\n    $query = new Query\\Select(User::class);\n    $query->where('id = ?', $userId);\n\n    return $this->selectOne($query);\n}\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"selectOneVirtualField"),": Select a single field from the first result, this\nfield does not need to be a field of the table, but does need to be defined in\nthe entity fields as a ",Object(i.b)("inlineCode",{parentName:"p"},"virtual")," field."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-php"},"public function findNumberOfUsers(int $userId): int\n{\n    $query = new Query\\Select(User::class, 'u', [\n        'total' => 'COUNT(*)',\n    ]);\n\n    return $this->selectOneVirtualField($query, 'total', 'int');\n}\n")))),Object(i.b)("h3",{id:"multiple-result-helpers"},"Multiple result helpers"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"select"),": Returns all results that the query produces with a generator, the\ngenerator yields entities."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-php"},"public function findUsersWithProjects(): \\Generator\n{\n    $query = new Query\\Select(User::class);\n    $query->where('has_project = ?', true);\n\n    return $this->select($query);\n}\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"selectCollection"),": Combine all results into a ",Object(i.b)("inlineCode",{parentName:"p"},"Access\\Collection")," to make\nworking with a bunch of entities a lot easier. ",Object(i.b)("a",{parentName:"p",href:"collections"},"Read more about\ncollections"),"."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Collection;\n\npublic function findUsersWithProjects(): Collection\n{\n    $query = new Query\\Select(User::class);\n    $query->where('has_project = ?', true);\n\n    return $this->selectCollection($query);\n}\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"selectBatched"),": With bigger result sets it might not be possible to use a\nsingle collection due to memory/performance constraints, but if you want to\nuse the functionality of a collection to manipulate the list of entities, a\nbatch provides a good middle ground. Using this helper will give back the\nresult in smaller batches, each batch will have a subset of the result. These\nbatches can be used just like a regular collection."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-php"},"public function findAllUsers(): \\Generator\n{\n    $query = new Query\\Select(User::class);\n\n    return $this->selectBatched($query);\n}\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"selectVirtualField"),': The "multi-counterpart" of the ',Object(i.b)("inlineCode",{parentName:"p"},"selectOneVirtualField"),"\nmethod to give back a single field for a list of results."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-php"},"public function findUsernameInformation(): \\Generator\n{\n    $query = new Query\\Select(User::class, 'u', [\n        'total' => 'COUNT(*)',\n    ]);\n    $query->groupBy('username');\n\n    return $this->selectVirtualField($query, 'total', 'int');\n}\n")))),Object(i.b)("h3",{id:"no-result-helpers"},"No result helpers"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"query"),": Execute a query without a result, useful for\n",Object(i.b)("inlineCode",{parentName:"p"},"INSERT"),"/",Object(i.b)("inlineCode",{parentName:"p"},"UPDATE"),"/",Object(i.b)("inlineCode",{parentName:"p"},"DELETE"),"/raw queries."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-php"},"public function updateUsername(int $userId, string $username): void\n{\n    $query = new Query\\Update(User::class);\n    $query->values([ 'username' => $username ]);\n    $query->where('id = ?', $userId);\n\n    $this->query($query);\n}\n")))))}p.isMDXComponent=!0},88:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||b[d]||i;return n?a.a.createElement(h,o(o({ref:t},c),{},{components:n})):a.a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);