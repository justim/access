"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[63],{6323:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var o=t(5893),s=t(1151);const i={id:"collections",title:"Collections",slug:"/collections"},l=void 0,c={id:"collections",title:"Collections",description:"A collection is a list of entities, this in contrast with the \\Generator",source:"@site/../docs/collections.md",sourceDirName:".",slug:"/collections",permalink:"/docs/collections",draft:!1,unlisted:!1,editUrl:"https://github.com/justim/access/edit/master/website/../docs/collections.md",tags:[],version:"current",frontMatter:{id:"collections",title:"Collections",slug:"/collections"},sidebar:"docs",previous:{title:"Queries",permalink:"/docs/queries"},next:{title:"Presenters",permalink:"/docs/presenters"}},r={},a=[{value:"Helper methods",id:"helper-methods",level:2},{value:"Relations",id:"relations",level:2},{value:"Has one",id:"has-one",level:3},{value:"Belongs to",id:"belongs-to",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["A collection is a list of entities, this in contrast with the ",(0,o.jsx)(n.code,{children:"\\Generator"}),"\napproach in some other parts of Access. You can use collections if you want to\noperate on your list of entities as a whole and not the only the entities on\ntheir own. If you just need to loop over a bunch of entities, it's advised to\nstick with the generators, as they are a bit more performant (no need to keep\nall entities in memory)."]}),"\n",(0,o.jsxs)(n.p,{children:["Collections can be created in different ways, but the most common way to get a\ncollection is through the ",(0,o.jsx)(n.a,{href:"repositories",children:"repository"})," of an entity. By default\nthe repository has a couple of methods to get a collection of entities, like the\n",(0,o.jsx)(n.code,{children:"findByAsCollection"})," and ",(0,o.jsx)(n.code,{children:"findAllCollection"})," methods."]}),"\n",(0,o.jsxs)(n.p,{children:["Another way to create a collection is by doing it yourself and adding entities\nyourself. ",(0,o.jsx)(n.code,{children:"Access\\Database::createCollection()"})," will return an empty collection\nfor you to use.`"]}),"\n",(0,o.jsx)(n.h2,{id:"helper-methods",children:"Helper methods"}),"\n",(0,o.jsxs)(n.p,{children:["There are a bunch of helper methods defined to make handling collections a bit\nmore pleasant Also, the ",(0,o.jsx)(n.code,{children:"Collection"})," class implements ",(0,o.jsx)(n.code,{children:"\\ArrayAccess"}),",\n",(0,o.jsx)(n.code,{children:"\\Countable"})," and ",(0,o.jsx)(n.code,{children:"\\IteratorAggregate"})," to blend in nicely into your other code."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"fromIterable"}),": Add a bunch of entities at once"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"addEntity"}),": Add a entity to the collection"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"isEmpty"}),": Is the collection empty?"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"getIds"}),": Get all IDs of the entities inside the collection"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"find"}),": Find the first matching entity with a callback"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"first"}),": Returns the first entity"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"merge"}),": Merge current collection with another one"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"sort"}),": Sort the collection with ",(0,o.jsx)(n.code,{children:"usort"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"map"}),": Map over all entities and return result"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"filter"}),": Create a new collection only with accepted entities"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"relations",children:"Relations"}),"\n",(0,o.jsxs)(n.p,{children:["One big reason for using collections is if you want to fetch related entities\nand want to prevent the ",(0,o.jsx)(n.code,{children:"n+1"})," problem."]}),"\n",(0,o.jsx)(n.h3,{id:"has-one",children:"Has one"}),"\n",(0,o.jsxs)(n.p,{children:['To get all "has-one" entities you use the ',(0,o.jsx)(n.code,{children:"findRefs"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"// get a list of users from somewhere\n$users = $db->getRepository(User::class)->findAllCollection();\n\n$profileImages = $users->findRefs(\n    ProfileImage::class,\n\n    // the ID of the profile image\n    fn(User $user) => $user->getProfileImageId(),\n);\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Executes the following SQL:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM profile_images WHERE id IN (1, 2, 3, ..)\n"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This creates a new collection with all the profile images of those users."}),"\n",(0,o.jsxs)(n.p,{children:["The collection class implements the ",(0,o.jsx)(n.code,{children:"\\ArrayAccess"})," interface and returns\nentities based on their ID. To continue the profile images example, you can do\nthe following to get the profile image of a specific user."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"// .. see above\n$profileImages = ..;\n\n$profileImage[$users->first()->getProfileImageId()]; // => ProfileImage entity\n"})}),"\n",(0,o.jsx)(n.h3,{id:"belongs-to",children:"Belongs to"}),"\n",(0,o.jsx)(n.p,{children:"Sometimes you want to access the relation the other why around."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"// get a list of profile images from somewhere\n$profileImages = $db->getRepository(ProfileImage::class)->findAllCollection();\n\n$users = $profileImages->findInversedRefs(\n    User::class,\n\n    // the field name where to look for profile image IDs\n    'profile_image_id',\n);\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Executes the following SQL:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM users WHERE profile_image_id IN (1, 2, 3, ..)\n"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>l});var o=t(7294);const s={},i=o.createContext(s);function l(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);