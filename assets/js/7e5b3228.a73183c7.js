"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[944],{3127:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>u,default:()=>o,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var r=n(5893),i=n(1151);const t={id:"queries",title:"Queries",slug:"/queries"},u=void 0,a={id:"queries",title:"Queries",description:"At the heart of any database access tool is creating queries that you send to",source:"@site/../docs/queries.md",sourceDirName:".",slug:"/queries",permalink:"/docs/queries",draft:!1,unlisted:!1,editUrl:"https://github.com/justim/access/edit/master/website/../docs/queries.md",tags:[],version:"current",frontMatter:{id:"queries",title:"Queries",slug:"/queries"},sidebar:"docs",previous:{title:"Repositories",permalink:"/docs/repositories"},next:{title:"Collections",permalink:"/docs/collections"}},l={},c=[{value:"Select queries",id:"select-queries",level:2},{value:"<code>WHERE</code> clauses",id:"where-clauses",level:3},{value:"Table aliasing",id:"table-aliasing",level:3},{value:"Joining other tables",id:"joining-other-tables",level:3},{value:"Subqueries",id:"subqueries",level:3},{value:"<code>HAVING</code> clauses",id:"having-clauses",level:3},{value:"<code>ORDER BY</code> clause",id:"order-by-clause",level:3},{value:"<code>LIMIT</code> clause",id:"limit-clause",level:3},{value:"Pagination cursors",id:"pagination-cursors",level:3},{value:"Insert queries",id:"insert-queries",level:2},{value:"Update queries",id:"update-queries",level:2},{value:"Delete queries",id:"delete-queries",level:2},{value:"Raw queries",id:"raw-queries",level:2},{value:"Soft deletable entities",id:"soft-deletable-entities",level:2},{value:"Debug queries",id:"debug-queries",level:2},{value:"Limitations",id:"limitations",level:2}];function d(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"At the heart of any database access tool is creating queries that you send to\nthe database. Access has a query builder to create queries with information from\nyour entities."}),"\n",(0,r.jsx)(s.h2,{id:"select-queries",children:"Select queries"}),"\n",(0,r.jsxs)(s.p,{children:["The most basic ",(0,r.jsx)(s.code,{children:"SELECT"})," query (",(0,r.jsx)(s.code,{children:"SELECT * FROM users"}),") is created like this:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Select(User::class);\n\n$query->getSql(); // SELECT * FROM `users`\n"})}),"\n",(0,r.jsxs)(s.h3,{id:"where-clauses",children:[(0,r.jsx)(s.code,{children:"WHERE"})," clauses"]}),"\n",(0,r.jsxs)(s.p,{children:["To make things a little bit more interesting you can add a ",(0,r.jsx)(s.code,{children:"WHERE"})," clause to the\nquery."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Select(User::class);\n$query->where('id = ?', 1);\n\n$query->getSql(); // SELECT * FROM `users` WHERE (id = :w0)\n$query->getValues(); // ['w0' => 1]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["As you can see the query and the values are separate, when sending the query to\nthe database a prepared statement is used to prevent all kinds of injection\nissues and speed up multiple of the same queries with different values. The ",(0,r.jsx)(s.code,{children:"w0"}),"\nplaceholder might seem a little big weird; every value used in the query has its\nown unique name, this makes combining queries straight forward with subqueries."]}),"\n",(0,r.jsxs)(s.p,{children:["All calls to ",(0,r.jsx)(s.code,{children:"where"})," are added to the query with ",(0,r.jsx)(s.code,{children:"AND"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Select(User::class);\n$query->where('id = ?', 1);\n$query->where('username = ?', 'Dave');\n\n$query->getSql(); // SELECT * FROM `users` WHERE (id = :w0) AND (username = :w1)\n$query->getValues(); // ['w0' => 1, 'username' => 'Dave']\n"})}),"\n",(0,r.jsxs)(s.p,{children:["If you want to add them with ",(0,r.jsx)(s.code,{children:"OR"})," you can use ",(0,r.jsx)(s.code,{children:"whereOr"}),". ",(0,r.jsx)(s.code,{children:"whereOr"})," accepts an\narray of where clauses."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Select(User::class);\n$query->whereOr([\n    'id = ?' => 1,\n    'id = ?' => 2,\n]);\n\n$query->getSql(); // SELECT * FROM `users` WHERE (id = :w0 OR id = :w1)\n$query->getValues(); // ['w0' => 1, 'w1' => 2]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Another way to create the query from about is by using an array as a value for\nthe ",(0,r.jsx)(s.code,{children:"id = ?"})," clauses."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Select(User::class);\n$query->where('id IN (?)', [1, 2]);\n\n$query->getSql(); // SELECT * FROM `users` WHERE (id IN (:w0, :w1))\n$query->getValues(); // ['w0' => 1, 'w1' => 2]\n"})}),"\n",(0,r.jsx)(s.p,{children:"And you can combine them, if you like"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Select(User::class);\n$query->whereOr([\n    'id = ?' => 1,\n    'id = ?' => 2,\n]);\n$query->where('username = ?', 'Dave');\n\n$query->getSql(); // SELECT * FROM `users` WHERE (id = :w0 OR id = :w1) AND (username = :w2)\n$query->getValues(); // ['w0' => 1, 'w1' => 2, 'w2' => 'Dave']\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This syntax, providing an array, is also possible with the regular ",(0,r.jsx)(s.code,{children:"where"}),"\nmethod, with the difference that those are joined with ",(0,r.jsx)(s.code,{children:"AND"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"table-aliasing",children:"Table aliasing"}),"\n",(0,r.jsxs)(s.p,{children:["It is possible to create an alias for the table you are using, the name of the\ntable comes from inside the entity class and might change at any time. Also, it\nmight be too many characters, like ",(0,r.jsx)(s.code,{children:"users"}),". I mean, who got time for that."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Select(User::class, 'u');\n$query->where('u.id = ?', 1);\n\n$query->getSql(); // SELECT `u`.* FROM `users` AS `u` WHERE (u.id = :w0)\n"})}),"\n",(0,r.jsx)(s.p,{children:"This is of course a lot more useful if there are more tables involved..."}),"\n",(0,r.jsx)(s.h3,{id:"joining-other-tables",children:"Joining other tables"}),"\n",(0,r.jsxs)(s.p,{children:["A simple join is created by calling ",(0,r.jsx)(s.code,{children:"innerJoin"})," on the query."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Select(User::class, 'u');\n$query->innerJoin(Project::class, 'p', ['p.owner_id = u.id', 'p.id > ?' => 1]);\n\n// SELECT `u`.* FROM `users` AS `u`\n//   INNER JOIN `projects` AS `p` ON ((p.owner_id = u.id) AND (p.id > :j0))\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Currently the only other type of join available is ",(0,r.jsx)(s.code,{children:"LEFT JOIN"})," with\n",(0,r.jsx)(s.code,{children:"Query::leftJoin"}),", more may follow in the future."]}),"\n",(0,r.jsx)(s.h3,{id:"subqueries",children:"Subqueries"}),"\n",(0,r.jsx)(s.p,{children:"There are two ways to inject a subquery into a query, as a virtual field, or as\na value for a where clause."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$subQuery = new Query\\Select(Project::class, 'p');\n$subQuery->select('COUNT(p.id)');\n$subQuery->where('p.owner_id = u.id');\n$subQuery->where('p.id > ?', 1);\n\n$query = new Query\\Select(User::class, 'u', [\n    'total_projects' => $subQuery,\n]);\n\n// SELECT `u`.*,\n//   (SELECT COUNT(p.id) FROM `projects` AS `p`\n//     WHERE (p.user_id = u.id) AND (p.id > :s0w0)\n//   ) AS `total_projects`\n// FROM `users` AS `u`\n"})}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["Note the with ",(0,r.jsx)(s.code,{children:"s0"})," prefixed placeholder for the subquery"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"The other way to inject a subquery is a value."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$subQuery = new Query\\Select(Project::class, 'p');\n$subQuery->select('p.owner_id');\n$subQuery->where('p.status = ?', 'IN_PROGRESS');\n$subQuery->limit(1);\n\n$query = new Select(User::class, 'u');\n$query->where('u.id = ?', $subQuery);\n\n// SELECT `u`.* FROM `users` AS `u`\n//   WHERE (u.id = (SELECT p.user_id FROM `projects` AS `p` WHERE (p.status = :z0w0) LIMIT 1))',\n"})}),"\n",(0,r.jsx)(s.p,{children:"Be careful when using subqueries, in our most cases you can only return a single\nfield and a single record, but this is not enforced. Keep this in mind."}),"\n",(0,r.jsxs)(s.h3,{id:"having-clauses",children:[(0,r.jsx)(s.code,{children:"HAVING"})," clauses"]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"having"})," method works the same as the ",(0,r.jsx)(s.code,{children:"where"})," method, with the difference\nthat the result clause is a ",(0,r.jsx)(s.code,{children:"HAVING"})," clause. Not ",(0,r.jsx)(s.em,{children:"having"})," any special treatment,\nbesides, of course, it works on the fields from a subquery/aggregate clause."]}),"\n",(0,r.jsxs)(s.h3,{id:"order-by-clause",children:[(0,r.jsx)(s.code,{children:"ORDER BY"})," clause"]}),"\n",(0,r.jsx)(s.p,{children:"Plain and simple; input is directly in output."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Select(User::class, 'u');\n$query->orderBy('u.id DESC');\n\n// SELECT `u`.* FROM `users` AS `u` ORDER BY u.id DESC\n"})}),"\n",(0,r.jsxs)(s.h3,{id:"limit-clause",children:[(0,r.jsx)(s.code,{children:"LIMIT"})," clause"]}),"\n",(0,r.jsx)(s.p,{children:"Also, plain and simple; input is directly in output."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Select(User::class, 'u');\n$query->limit(10);\n\n// SELECT `u`.* FROM `users` AS `u` LIMIT 10\n"})}),"\n",(0,r.jsx)(s.h3,{id:"pagination-cursors",children:"Pagination cursors"}),"\n",(0,r.jsx)(s.p,{children:"A common reason to limit your query is for pagination, Access provideds a\nmechanism to simplify this. There are two ways to get started with cursors,\nfirst there is the simple page number cursor."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query\\Select;\nuse Access\\Query\\Cursor\\PageCursor;\n\n$cursor = new PageCursor(3, 10); // defaults are 1 and 50\n\n$query = new Select(User::class);\n$query->orderBy('id ASC');\n$query->applyCursor($cursor);\n\n// SELECT `users`.* FROM `users` ORDER BY id ASC LIMIT 10 OFFSET 20\n"})}),"\n",(0,r.jsx)(s.p,{children:"Using a simple limit/offset does not work in all cases, for example when your\nlist changes a lot and records would appear on a different page then when you\nrequested the page. A solution for this is to ask for the next number of\nrecords, but skip the ones you already have."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query\\Select;\nuse Access\\Query\\Cursor\\CurrentIdsCursor;\n\n$cursor = new CurrentIdsCursor([1, 2, 3], 10); // defaults are [] and 50\n\n$query = new Select(User::class);\n$query->orderBy('RAND()');\n$query->applyCursor($cursor);\n\n// SELECT `users`.* FROM `users`\n//   WHERE (users.id NOT IN  (1, 2, 3)) ORDER BY RAND() LIMIT 10\n"})}),"\n",(0,r.jsx)(s.p,{children:'The order is set to random, but you will still get a next "page" with completely\nnew records.'}),"\n",(0,r.jsx)(s.h2,{id:"insert-queries",children:"Insert queries"}),"\n",(0,r.jsxs)(s.p,{children:["You can create an insert query by creating ",(0,r.jsx)(s.code,{children:"Query\\Insert"})," and adding some values\nto it."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Insert(User::class);\n$query->values(['username' => 'Dave']);\n\n// INSERT INTO `users` (username) VALUES (:p0)\n"})}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsx)(s.p,{children:"All of the other methods are not supposed to be called, they bork your query as\nsome of them manipulate the values used in the query."})}),"\n",(0,r.jsxs)(s.p,{children:["In practice you would just use ",(0,r.jsx)(s.code,{children:"Database::insert"})," with an entity."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"$user = new User();\n$user->setUsername('Dave');\n\n$this->db->insert($user);\n"})}),"\n",(0,r.jsx)(s.h2,{id:"update-queries",children:"Update queries"}),"\n",(0,r.jsxs)(s.p,{children:["Updating a bunch of records, or just a single one, can be done with\n",(0,r.jsx)(s.code,{children:"Query\\Update"}),". This follows the same structure as insert queries, with the\naddition of ",(0,r.jsx)(s.a,{href:"#where-clauses",children:"where clauses"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Update(User::class);\n$query->values(['username' => 'Not Dave']);\n\n// UPDATE `users` SET `username` = :p0\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Most of the time you only want to update a few select records, you can just add\na ",(0,r.jsx)(s.code,{children:"WHERE"})," clause to the query, just like ",(0,r.jsx)(s.code,{children:"Query\\Select"})," queries."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Update(User::class);\n$query->values(['username' => 'Not Dave']);\n$query->where('id = ?', 1);\n\n// UPDATE `users` SET `username` = :p0 WHERE (id = :w0)\n"})}),"\n",(0,r.jsx)(s.p,{children:"You also get a little bit fancy by letting some other tables join the query."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",metastring:'title="Updating users that own a project"',children:"use Access\\Query;\n\n$query = new Query\\Update(User::class, 'u');\n$query->innerJoin(Project::class, 'p', ['p.owner_id = u.id']);\n$query->values(['username' => 'Not Dave']);\n\n// UPDATE `users` AS `u`\n//   INNER JOIN `projects` AS `p` ON (p.owner_id = u.id) SET `username` = :p0\n"})}),"\n",(0,r.jsx)(s.h2,{id:"delete-queries",children:"Delete queries"}),"\n",(0,r.jsxs)(s.p,{children:["Deleting records can be done with ",(0,r.jsx)(s.code,{children:"Query\\Delete"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Delete(User::class);\n$query->values(['username' => 'Not Dave']);\n$query->where('id = ?', 1);\n\n// DELETE FROM `users` SET `username` = :p0 WHERE (id = :w0)\n"})}),"\n",(0,r.jsx)(s.p,{children:"And again, adding some table to join the query is possible."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",metastring:'title="Deleting users that own a projects"',children:"use Access\\Query;\n\n$query = new Query\\Delete(User::class, 'u');\n$query->innerJoin(Project::class, 'p', 'p.owner_id = u.id');\n\n// DELETE `u` FROM `users` AS `u` INNER JOIN `projects` AS `p` ON (p.owner_id = u.id)\n"})}),"\n",(0,r.jsx)(s.h2,{id:"raw-queries",children:"Raw queries"}),"\n",(0,r.jsx)(s.p,{children:"If you ever run into the situation where you want to execute a query that is\nnot supported by the query builder, then you can resort to just using a raw\nquery -- a plain string."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n$query = new Query\\Raw('CREATE TABLE ...');\n\n// CREATE TABLE ...\n"})}),"\n",(0,r.jsx)(s.h2,{id:"soft-deletable-entities",children:"Soft deletable entities"}),"\n",(0,r.jsxs)(s.p,{children:["Queries run on entities that are soft deletable result in a query that has\n",(0,r.jsx)(s.code,{children:"deleted_at IS NULL"})," injected into them automatically. This makes sure soft\ndeleted entities never show up in the results of an query, or are even used in\nthe query."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Entity;\nuse Access\\Query;\n\nclass User extends Entity\n{\n    use Entity\\SoftDeletableTrait;\n\n    // etc\n}\n\n$query = new Query\\Select(User::class, 'u');\n$query->where('id = ?', 1);\n\n// SELECT `u`.* FROM `users` AS `u` WHERE (`u`.`deleted_at` IS NULL) AND (u.id = :w0)\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The same is true for joins, the ",(0,r.jsx)(s.code,{children:"deleted_at IS NULL"})," condition is automatically\nadded to the ",(0,r.jsx)(s.code,{children:"ON"})," clause."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\Query;\n\n// Project is also soft deletable\n\n$query = new Query\\Select(User::class, 'u');\n$query->innerJoin(Project::class, 'p', ['p.owner_id = u.id']);\n\n// SELECT `u`.* FROM `users` AS `u`\n//   INNER JOIN `projects` AS `p` ON ((`p`.`deleted_at` IS NULL) AND (p.owner_id = u.id))\n//   WHERE (`u`.`deleted_at` IS NULL)\n"})}),"\n",(0,r.jsx)(s.h2,{id:"debug-queries",children:"Debug queries"}),"\n",(0,r.jsxs)(s.p,{children:["If you want to know what query is sent to the database in a more human readable\nfor, you can use ",(0,r.jsx)(s.code,{children:"Access\\DebugQuery"}),". This will automatically fill all the\nplaceholders and convert the values to its database format. The result is ",(0,r.jsx)(s.em,{children:"not"}),"\nwhat gets send over the wire."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use Access\\DebugQuery;\n\n$query = new Query\\Select(User::class);\n$query->where('id = ?', 1);\n\n$debugQuery = new DebugQuery($query);\n$debugQuery->toRunnableQuery();\n\n// SELECT * FROM `users` WHERE id = 1\n"})}),"\n",(0,r.jsxs)(s.admonition,{type:"warning",children:[(0,r.jsxs)(s.mdxAdmonitionTitle,{children:["Do ",(0,r.jsx)(s.em,{children:"not"})," use this in production code"]}),(0,r.jsxs)(s.p,{children:["Only use this to ",(0,r.jsx)(s.em,{children:"view"})," a more friendly version of the query for debug purposes"]})]}),"\n",(0,r.jsx)(s.h2,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsx)(s.p,{children:'Outside missing SQL features, another limitation of the Access query builder is\nthat is quite possible to create invalid. Some protections are in place, but\nmostly, anything goes. The only "magic" that is in place is for the placeholder,\nthe rest is pretty much a fancy string concat; no validation is taking place\nwhen building a query another limitation of the Access query builder is that is\nquite possible to create invalid. Some protections are in place, but mostly,\nanything goes. The only "magic" that is in place is for the placeholder, the\nrest is pretty much a fancy string concat; no validation is taking place when\nbuilding a query. Most string are used "as is".'}),"\n",(0,r.jsx)(s.p,{children:"With great power comes great responsibility :)"})]})}function o(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>a,a:()=>u});var r=n(7294);const i={},t=r.createContext(i);function u(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:u(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);