"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[331],{5401:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var s=n(5893),i=n(1151);const a={id:"cascade",title:"Cascade",slug:"/cascade"},d=void 0,l={id:"cascade",title:"Cascade",description:"Cascading in Access is done by adding some information to the entity fields, or",source:"@site/../docs/cascade.md",sourceDirName:".",slug:"/cascade",permalink:"/docs/cascade",draft:!1,unlisted:!1,editUrl:"https://github.com/justim/access/edit/master/website/../docs/cascade.md",tags:[],version:"current",frontMatter:{id:"cascade",title:"Cascade",slug:"/cascade"},sidebar:"docs",previous:{title:"Entities",permalink:"/docs/entities"},next:{title:"Repositories",permalink:"/docs/repositories"}},o={},c=[{value:"Examples",id:"examples",level:2},{value:"Cascade chains",id:"cascade-chains",level:2}];function r(e){const t={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Cascading in Access is done by adding some information to the entity fields, or\nthe relations definition. It is currently only possible to cascade deletes,\neither regular deletes or soft deletes."}),"\n",(0,s.jsxs)(t.p,{children:["For entity fields there is a new options: ",(0,s.jsx)(t.code,{children:"'cascade'"}),", it contains an instance\nof [",(0,s.jsx)(t.code,{children:"Cascade"}),"] detailing how it should behave. The most common way to set this\nup is by by using ",(0,s.jsx)(t.code,{children:"Cascade::deleteSame()"}),", which will enable cascading as much\nas possible. In combination with this setting, there is also the ",(0,s.jsx)(t.code,{children:"'target'"}),"\nsetting to tell which entity class is targeted by the relation."]}),"\n",(0,s.jsxs)(t.p,{children:["When an entity is deleted the ",(0,s.jsx)(t.code,{children:"'cascade'"})," setting for the fields will determine\nwhat will happen to those related entities. There are two different start\nscenarios:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The entity is regularly deleted (",(0,s.jsx)(t.code,{children:"DELETE FROM .."}),"); related entities will\nthen also be regularly deleted. Foreign keys would otherwise break."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The entity is soft deleted (",(0,s.jsx)(t.code,{children:"UPDATE .. SET deleted_at = NOW()"}),"); the\nforeign keys stay intact, related will also be soft deleted. Some entities\ndon't support soft deleting and the ",(0,s.jsx)(t.code,{children:"'cascade'"})," setting will determine if the\nentity is regularly deleted, or if nothing will happen."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["It's also possible to for force a regular delete when a cascade is started with\na soft delete; useful if not all entities in the cascade chain are soft\ndeletable. The setting for ",(0,s.jsx)(t.code,{children:"'cascade'"})," is: ",(0,s.jsx)(t.code,{children:"Cascade::deleteForceRegular"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.p,{children:"The most basic example with a user and an attached photo."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"class Photo extends Entity {\n}\n\nclass Project extends Entity {\n    public static function fields(): array {\n        return [\n            'profile_image_id' => [\n                'type' => 'int',\n                'target' => Photo::class,\n                'cascade' => Cascade::deleteSame(),\n            ],\n        ];\n    }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creating a user with a photo as a profile image, and then deleting the user\nwill also remove the photo."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"$photo = new Photo();\n$db->save($photo);\n\n$user = new User();\n$user->setProfileImage($photo);\n$db->save($user);\n\n// will delete the user and the photo\n$db->delete($user);\n"})}),"\n",(0,s.jsxs)(t.p,{children:['It\'s slightly more complicated when the entity that gets deleted is not the\n"holder" of the relation; it does not have the field that creates the relation.\nSome extra information is needed to tell Access what else needs to be deleted,\nthis is done with the ',(0,s.jsx)(t.code,{children:"relations"})," method on the ",(0,s.jsx)(t.code,{children:"Entity"})," class that can be\noverridden to define its relations outside its fields."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"class Project extends Entity {\n}\n\nclass User extends Entity {\n    public static function relations(): array {\n        return [\n            'projects' => [\n                'field' => 'user_id',\n                'target' => Project::class,\n                'cascade' => Cascade::deleteSame(),\n            ],\n        ];\n    }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"When deleting a user, all of its projects should also be deleted."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"$user = new User();\n$db->save($user);\n\n$project = new Project();\n$project->setUser($user);\n$db->save($project);\n\n// will delete the user and all its projects\n$db->delete($user);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"cascade-chains",children:"Cascade chains"}),"\n",(0,s.jsx)(t.p,{children:"When a related entity also has relations that should be deleted, then it is\ndone recursively for all entities until there is nothing that needs deleting\nanymore."})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>d});var s=n(7294);const i={},a=s.createContext(i);function d(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);