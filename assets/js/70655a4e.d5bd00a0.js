"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[610],{6979:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var s=t(5893),r=t(1151);const i={id:"repositories",title:"Repositories",slug:"/repositories"},l=void 0,o={id:"repositories",title:"Repositories",description:"To get the repository associated with an entity, you can call the",source:"@site/../docs/repositories.md",sourceDirName:".",slug:"/repositories",permalink:"/docs/repositories",draft:!1,unlisted:!1,editUrl:"https://github.com/justim/access/edit/master/website/../docs/repositories.md",tags:[],version:"current",frontMatter:{id:"repositories",title:"Repositories",slug:"/repositories"},sidebar:"docs",previous:{title:"Cascade",permalink:"/docs/cascade"},next:{title:"Queries",permalink:"/docs/queries"}},c={},a=[{value:"Helper methods",id:"helper-methods",level:2},{value:"Single result helpers",id:"single-result-helpers",level:3},{value:"Multiple result helpers",id:"multiple-result-helpers",level:3},{value:"No result helpers",id:"no-result-helpers",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["To get the repository associated with an entity, you can call the\n",(0,s.jsx)(n.code,{children:"getRepository"})," method on the database instance. This returns a\n",(0,s.jsx)(n.code,{children:"Access\\Repository"})," instance."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$userRepo = $db->getRepository(User::class);\n$user = $userRepo->findOne($userId);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When the default methods on the database instance are not enough anymore, and\nthe default repository also comes up short, it's time to create a custom\nrepository for an entity to fetch entity with more complex logic. A repository\nis a collection of methods that hide away the query executed to the outside\nworld. For example, if you want a list of all users that have a project\nattached, you create a method called ",(0,s.jsx)(n.code,{children:"findUsersWithProjects"})," and define a query\ninside. When you use the repository the only this you know is that you can get a\nlist of users with a project, but how that is achieved does not matter to that\nthe outside, only that you get a list."]}),"\n",(0,s.jsx)(n.p,{children:"So, let's first create a repository."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="UserRepository.php"',children:"use Access\\Repository;\n\nclass UserRepository extends Repository\n{\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"By default this repository has no more functionality that the default repository\nalready available for all entities. To make the repository more usefull, let's\nadd a method to it."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="UserRepository.php"',children:"use Access\\Query;\nuse Access\\Repository;\n\nclass UserRepository extends Repository\n{\n    public function findUsersWithProjects(): \\Generator\n    {\n        $query = new Query\\Select(User::class);\n        $query->where('has_project = ?', true);\n\n        return $this->select($query);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{children:(0,s.jsx)(n.a,{href:"queries",children:"Queries"})}),(0,s.jsxs)(n.p,{children:["For more information about queries, ",(0,s.jsx)(n.a,{href:"queries",children:"you can read all about them here"}),"."]})]}),"\n",(0,s.jsx)(n.h2,{id:"helper-methods",children:"Helper methods"}),"\n",(0,s.jsxs)(n.p,{children:["The pattern is the same each time, you define a method, create a query and\nreturn it with a helper method of the ",(0,s.jsx)(n.code,{children:"Access\\Repository"})," class. These methods\ndetermine what gets returned to the user, some simply returning a single\nentities to all kinds of lists."]}),"\n",(0,s.jsx)(n.h3,{id:"single-result-helpers",children:"Single result helpers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"selectOne"}),": Select a single entity, will set the limit to ",(0,s.jsx)(n.code,{children:"1"})," and return the\nfirst result as an entity, or ",(0,s.jsx)(n.code,{children:"null"})," if there are no results."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function findSomeUser(int $userId): \\User\n{\n    $query = new Query\\Select(User::class);\n    $query->where('id = ?', $userId);\n\n    return $this->selectOne($query);\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"selectOneVirtualField"}),": Select a single field from the first result, this\nfield does not need to be a field of the table, but does need to be defined in\nthe entity fields as a ",(0,s.jsx)(n.code,{children:"virtual"})," field."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function findNumberOfUsers(int $userId): int\n{\n    $query = new Query\\Select(User::class, 'u', [\n        'total' => 'COUNT(*)',\n    ]);\n\n    return $this->selectOneVirtualField($query, 'total', 'int');\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"multiple-result-helpers",children:"Multiple result helpers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"select"}),": Returns all results that the query produces with a generator, the\ngenerator yields entities."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function findUsersWithProjects(): \\Generator\n{\n    $query = new Query\\Select(User::class);\n    $query->where('has_project = ?', true);\n\n    return $this->select($query);\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"selectCollection"}),": Combine all results into a ",(0,s.jsx)(n.code,{children:"Access\\Collection"})," to make\nworking with a bunch of entities a lot easier. ",(0,s.jsx)(n.a,{href:"collections",children:"Read more about\ncollections"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Access\\Collection;\n\npublic function findUsersWithProjects(): Collection\n{\n    $query = new Query\\Select(User::class);\n    $query->where('has_project = ?', true);\n\n    return $this->selectCollection($query);\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"selectBatched"}),": With bigger result sets it might not be possible to use a\nsingle collection due to memory/performance constraints, but if you want to\nuse the functionality of a collection to manipulate the list of entities, a\nbatch provides a good middle ground. Using this helper will give back the\nresult in smaller batches, each batch will have a subset of the result. These\nbatches can be used just like a regular collection."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function findAllUsers(): \\Generator\n{\n    $query = new Query\\Select(User::class);\n\n    return $this->selectBatched($query);\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"selectVirtualField"}),': The "multi-counterpart" of the ',(0,s.jsx)(n.code,{children:"selectOneVirtualField"}),"\nmethod to give back a single field for a list of results."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function findUsernameInformation(): \\Generator\n{\n    $query = new Query\\Select(User::class, 'u', [\n        'total' => 'COUNT(*)',\n    ]);\n    $query->groupBy('username');\n\n    return $this->selectVirtualField($query, 'total', 'int');\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"selectWithEntityProvider"}),": Provide a custom entity provider to use when\nselecting entities. With the introduction of the\n",(0,s.jsx)(n.code,{children:"VirtualArrayEntityProvider"})," it is now possible to select multiple arbitrary\nfields."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function findUserNames(): \\Generator\n{\n    $query = new Query\\Select(User::class, 'u', [\n        'name' => 'u.name',\n        'some_number' => 'u.some_number',\n    ]);\n\n    return $this->selectWithEntityProvider(\n        $query,\n        new VirtualArrayEntityProvider([\n            'name' => [],\n            'some_number' => [\n                'type' => 'int',\n            ],\n        ]),\n    );\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"no-result-helpers",children:"No result helpers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"query"}),": Execute a query without a result, useful for\n",(0,s.jsx)(n.code,{children:"INSERT"}),"/",(0,s.jsx)(n.code,{children:"UPDATE"}),"/",(0,s.jsx)(n.code,{children:"DELETE"}),"/raw queries."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function updateUsername(int $userId, string $username): void\n{\n    $query = new Query\\Update(User::class);\n    $query->values([ 'username' => $username ]);\n    $query->where('id = ?', $userId);\n\n    $this->query($query);\n}\n"})}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>l});var s=t(7294);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);