(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return o}));var a=n(3),i=n(7),l=(n(0),n(88)),r={id:"entities",title:"Entities",slug:"/entities"},s={unversionedId:"entities",id:"entities",isDocsHomePage:!1,title:"Entities",description:"You can create entities by extending Access/Entity and implementing some",source:"@site/../docs/entities.md",slug:"/entities",permalink:"/docs/entities",editUrl:"https://github.com/justim/access/edit/master/website/../docs/entities.md",version:"current",sidebar:"docs",previous:{title:"Database",permalink:"/docs/database"},next:{title:"Repositories",permalink:"/docs/repositories"}},b=[{value:"Table name",id:"table-name",children:[]},{value:"Fields",id:"fields",children:[{value:"Special fields",id:"special-fields",children:[]},{value:"Access fields",id:"access-fields",children:[]}]},{value:"Full example",id:"full-example",children:[]}],c={toc:b};function o(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"You can create entities by extending ",Object(l.b)("inlineCode",{parentName:"p"},"Access/Entity")," and implementing some\nmethods to tell Access what your entity is about. The methods you must implement\nare ",Object(l.b)("inlineCode",{parentName:"p"},"tableName")," and ",Object(l.b)("inlineCode",{parentName:"p"},"fields"),", first is used to query the right database table\nand the second is used access the right fields of that table."),Object(l.b)("h2",{id:"table-name"},"Table name"),Object(l.b)("p",null,"A very straight forward method to get the name of the table that is used for all\noperations on this entity, ",Object(l.b)("inlineCode",{parentName:"p"},"tableName")," just return a string with the name of the\ntable."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Entity;\n\nclass User extends Entity\n{\n    /**\n     * Get the table name for this entity\n     */\n    public static function tableName(): string\n    {\n        return 'users';\n    }\n}\n")),Object(l.b)("h2",{id:"fields"},"Fields"),Object(l.b)("p",null,"The result of ",Object(l.b)("inlineCode",{parentName:"p"},"fields")," is an array with the field name for a key and a\ndefinition as its value."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Entity;\n\nclass User extends Entity\n{\n    /**\n     * Get all fields needed for this entity to work\n     */\n    public static function fields(): array\n    {\n        return [\n            'username' => [\n                // some definition\n            ],\n        ];\n    }\n}\n")),Object(l.b)("p",null,"The definition supports the following options:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"type"),": The type of the field, to be used in the conversion from and to the database. Allowed values:"),Object(l.b)("table",{parentName:"li"},Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"From database"),Object(l.b)("th",{parentName:"tr",align:null},"To database"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("em",{parentName:"td"},"default")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"string")," ",Object(l.b)("em",{parentName:"td"},"(no conversion is done)")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("em",{parentName:"td"},"(no conversion is done)"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"self::FIELD_TYPE_INT")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"int")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("em",{parentName:"td"},"(no conversion is done)"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"self::FIELD_TYPE_BOOL")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"bool")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"1"),"/",Object(l.b)("inlineCode",{parentName:"td"},"0"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"self::FIELD_TYPE_DATE")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"\\DateTimeImmutable")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Y-m-d")," formatted string")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"self::FIELD_TYPE_DATETIME")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"\\DateTimeImmutable")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Y-m-d H:i:s")," formatted string")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"self::FIELD_TYPE_JSON")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"json_decode(<value>, true)")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"json_encode(<value>)"))))),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-php"},"'is_admin' => [\n    'type' => self::FIELD_TYPE_BOOL,\n],\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"default"),": The default value of the field when inserting a new entity, will\ngo through the conversion defined by the ",Object(l.b)("inlineCode",{parentName:"p"},"type"),". When a callback is used, it\nwill be called on demand with the entity as the only parameter, useful for\ndates, generating random values."),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-php"},"'profile_image' => [\n    'default' => null,\n],\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-php"},"'secret' => [\n    'default' => fn() => mt_rand(0, 1000),\n],\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"virtual"),": A boolean indicating this value is not a real value, but is\nincluded in the entity as the result of a join/subquery. Will not be saved."),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-php"},"'total_projects' => [\n    'virtual' => true,\n],\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"excludeInCopy"),": When creating a copy with ",Object(l.b)("inlineCode",{parentName:"p"},"Entity::copy")," this field will be\nexcluded"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-php"},"'published_at' => [\n    'excludeInCopy' => true,\n],\n")))),Object(l.b)("h3",{id:"special-fields"},"Special fields"),Object(l.b)("p",null,"There are a couple of special fields that you don't need to specify in the\nresult of ",Object(l.b)("inlineCode",{parentName:"p"},"fields"),", namely:"),Object(l.b)("h4",{id:"id"},"ID"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"id")," field will be managed automatically by Access and can not be changes\nonce set, the ",Object(l.b)("inlineCode",{parentName:"p"},"Entity")," class provides a ",Object(l.b)("inlineCode",{parentName:"p"},"getId")," to access it. This method will\nthrow is the ID is not available this the entity, if you want to know if the ID\nis available there is ",Object(l.b)("inlineCode",{parentName:"p"},"hasId"),"."),Object(l.b)("h4",{id:"timestamps"},"Timestamps"),Object(l.b)("p",null,"It is possible to enable the timestamp fields ",Object(l.b)("inlineCode",{parentName:"p"},"created_at")," and ",Object(l.b)("inlineCode",{parentName:"p"},"updated_at")," by\nimplementing the ",Object(l.b)("inlineCode",{parentName:"p"},"timestamps")," method and returning ",Object(l.b)("inlineCode",{parentName:"p"},"true"),". These fields will no\nbe available inside the entity. An easy way to get this working is by using the\n",Object(l.b)("inlineCode",{parentName:"p"},"TimestampableTrait"),", this will implement the ",Object(l.b)("inlineCode",{parentName:"p"},"timestamps")," method and provide a\ncouple of getters for the fields."),Object(l.b)("p",null,"Once enabled the ",Object(l.b)("inlineCode",{parentName:"p"},"Entity")," class will update the fields when needed, on insert\nand on on update. No need to do this yourself."),Object(l.b)("h4",{id:"soft-delete"},"Soft delete"),Object(l.b)("p",null,"Access supports soft deleting entities out of the box with the ",Object(l.b)("inlineCode",{parentName:"p"},"deleted_at"),"\nfield, it can be enabled for an entity by implementing ",Object(l.b)("inlineCode",{parentName:"p"},"isSoftDeletable")," and\nreturning ",Object(l.b)("inlineCode",{parentName:"p"},"true"),". Once the fields is filled, Access will no longer return the\nentity from any of the query it runs. An easy way to get this working is by\nusing the ",Object(l.b)("inlineCode",{parentName:"p"},"SoftDeletableTrait"),", this will implement the ",Object(l.b)("inlineCode",{parentName:"p"},"isSoftDeletable")," method\nand provide a couple of getters/setters for the fields."),Object(l.b)("h3",{id:"access-fields"},"Access fields"),Object(l.b)("p",null,"Now that we have all fields defined, we need a way to access them from the\noutside. The values itself are privately stored inside the ",Object(l.b)("inlineCode",{parentName:"p"},"Entity")," class and\ncan only be accessed by the protected getter (",Object(l.b)("inlineCode",{parentName:"p"},"get"),") and setter (",Object(l.b)("inlineCode",{parentName:"p"},"set"),")."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Entity;\n\nclass User extends Entity\n{\n    /**\n     * Get the value of the `username` field\n     */\n    public function getUsername(): string\n    {\n        return $this->get('username');\n    }\n\n    /**\n     * Set the value of the `username` field\n     */\n    public function setUsername(string $username): void\n    {\n        $this->set('username', $username);\n    }\n}\n")),Object(l.b)("h2",{id:"full-example"},"Full example"),Object(l.b)("p",null,"A complete example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-php",metastring:'title="User.php"',title:'"User.php"'},"<?php\n\nuse Access\\Entity;\n\nclass User extends Entity\n{\n    /**\n     * Get the table name for this entity\n     */\n    public static function tableName(): string\n    {\n        return 'users';\n    }\n\n    /**\n     * Get all fields needed for this entity to work\n     */\n    public static function fields(): array\n    {\n        return [\n            'username' => [\n                // by default a field is of the type string/varchar/text\n            ],\n            'is_admin' => [\n                // Access will convert this field from/to bool\n                'type' => self::FIELD_TYPE_BOOL,\n\n                // the default value for when inserting a new entity\n                'default' => false,\n            ],\n            'metadata' => [\n                // Access will convert this field from/to json\n                'type' => self::FIELD_TYPE_JSON,\n            ],\n        ];\n    }\n\n    /**\n     * Get the value of the `username` field\n     */\n    public function getUsername(): string\n    {\n        return $this->get('username');\n    }\n\n    /**\n     * Set the value of the `username` field\n     */\n    public function setUsername(string $username): void\n    {\n        $this->set('username', $username);\n    }\n}\n")))}o.isMDXComponent=!0},88:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),o=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=o(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),d=o(n),m=a,u=d["".concat(r,".").concat(m)]||d[m]||p[m]||l;return n?i.a.createElement(u,s(s({ref:t},c),{},{components:n})):i.a.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var s={};for(var b in t)hasOwnProperty.call(t,b)&&(s[b]=t[b]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<l;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);