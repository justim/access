(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return a})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var o=n(3),i=n(7),r=(n(0),n(88)),l={id:"collections",title:"Collections",slug:"/collections"},a={unversionedId:"collections",id:"collections",isDocsHomePage:!1,title:"Collections",description:"A collection is a list of entities, this in contrast with the \\Generator",source:"@site/../docs/collections.md",slug:"/collections",permalink:"/docs/collections",editUrl:"https://github.com/justim/access/edit/master/website/../docs/collections.md",version:"current",sidebar:"docs",previous:{title:"Queries",permalink:"/docs/queries"},next:{title:"Presenters",permalink:"/docs/presenters"}},c=[{value:"Helper methods",id:"helper-methods",children:[]},{value:"Relations",id:"relations",children:[{value:"Has one",id:"has-one",children:[]},{value:"Belongs to",id:"belongs-to",children:[]}]}],s={toc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"A collection is a list of entities, this in contrast with the ",Object(r.b)("inlineCode",{parentName:"p"},"\\Generator"),"\napproach in some other parts of Access. You can use collections if you want to\noperate on your list of entities as a whole and not the only the entities on\ntheir own. If you just need to loop over a bunch of entities, it's advised to\nstick with the generators, as they are a bit more performant (no need to keep\nall entities in memory)."),Object(r.b)("p",null,"Collections can be created in different ways, but the most common way to get a\ncollection is through the ",Object(r.b)("a",{parentName:"p",href:"repositories"},"repository")," of an entity. By default\nthe repository has a couple of methods to get a collection of entities, like the\n",Object(r.b)("inlineCode",{parentName:"p"},"findByAsCollection")," and ",Object(r.b)("inlineCode",{parentName:"p"},"findAllCollection")," methods."),Object(r.b)("p",null,"Another way to create a collection is by doing it yourself and adding entities\nyourself. ",Object(r.b)("inlineCode",{parentName:"p"},"Access\\Database::createCollection()")," will return an empty collection\nfor you to use.`"),Object(r.b)("h2",{id:"helper-methods"},"Helper methods"),Object(r.b)("p",null,"There are a bunch of helper methods defined to make handling collections a bit\nmore pleasant Also, the ",Object(r.b)("inlineCode",{parentName:"p"},"Collection")," class implements ",Object(r.b)("inlineCode",{parentName:"p"},"\\ArrayAccess"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"\\Countable")," and ",Object(r.b)("inlineCode",{parentName:"p"},"\\IteratorAggregate")," to blend in nicely into your other code."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"fromIterable"),": Add a bunch of entities at once"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"addEntity"),": Add a entity to the collection"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isEmpty"),": Is the collection empty?"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getIds"),": Get all IDs of the entities inside the collection"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"find"),": Find the first matching entity with a callback"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"first"),": Returns the first entity"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"merge"),": Merge current collection with another one"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"sort"),": Sort the collection with ",Object(r.b)("inlineCode",{parentName:"li"},"usort")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"map"),": Map over all entities and return result"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filter"),": Create a new collection only with accepted entities")),Object(r.b)("h2",{id:"relations"},"Relations"),Object(r.b)("p",null,"One big reason for using collections is if you want to fetch related entities\nand want to prevent the ",Object(r.b)("inlineCode",{parentName:"p"},"n+1")," problem."),Object(r.b)("h3",{id:"has-one"},"Has one"),Object(r.b)("p",null,'To get all "has-one" entities you use the ',Object(r.b)("inlineCode",{parentName:"p"},"findRefs")," method."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"// get a list of users from somewhere\n$users = $db->getRepository(User::class)->findAllCollection();\n\n$profileImages = $users->findRefs(\n    ProfileImage::class,\n\n    // the ID of the profile image\n    fn(User $user) => $user->getProfileImageId(),\n);\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Executes the following SQL:"),Object(r.b)("pre",{parentName:"blockquote"},Object(r.b)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM profile_images WHERE id IN (1, 2, 3, ..)\n"))),Object(r.b)("p",null,"This creates a new collection with all the profile images of those users."),Object(r.b)("p",null,"The collection class implements the ",Object(r.b)("inlineCode",{parentName:"p"},"\\ArrayAccess")," interface and returns\nentities based on their ID. To continue the profile images example, you can do\nthe following to get the profile image of a specific user."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"// .. see above\n$profileImages = ..;\n\n$profileImage[$users->first()->getProfileImageId()]; // => ProfileImage entity\n")),Object(r.b)("h3",{id:"belongs-to"},"Belongs to"),Object(r.b)("p",null,"Sometimes you want to access the relation the other why around."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"// get a list of profile images from somewhere\n$profileImages = $db->getRepository(ProfileImage::class)->findAllCollection();\n\n$users = $profileImages->findInversedRefs(\n    User::class,\n\n    // the field name where to look for profile image IDs\n    'profile_image_id',\n);\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Executes the following SQL:"),Object(r.b)("pre",{parentName:"blockquote"},Object(r.b)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users WHERE profile_image_id IN (1, 2, 3, ..)\n"))))}p.isMDXComponent=!0},88:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var o=n(0),i=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(n),m=o,d=b["".concat(l,".").concat(m)]||b[m]||u[m]||r;return n?i.a.createElement(d,a(a({ref:t},s),{},{components:n})):i.a.createElement(d,a({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var s=2;s<r;s++)l[s]=n[s];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);