(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(3),s=t(7),i=(t(0),t(88)),a={id:"presenters",title:"Presenters",slug:"/presenters"},o={unversionedId:"presenters",id:"presenters",isDocsHomePage:!1,title:"Presenters",description:"Presenters are Access' way to serialize entities and collection to something you",source:"@site/../docs/presenters.md",slug:"/presenters",permalink:"/docs/presenters",editUrl:"https://github.com/justim/access/edit/master/website/../docs/presenters.md",version:"current",sidebar:"docs",previous:{title:"Collections",permalink:"/docs/collections"},next:{title:"Transactions",permalink:"/docs/transactions"}},l=[{value:"Simple entity presenter",id:"simple-entity-presenter",children:[]},{value:"Collection presenters",id:"collection-presenters",children:[]},{value:"Nested presenters",id:"nested-presenters",children:[{value:"<code>has-many</code> relation",id:"has-many-relation",children:[]}]},{value:"Clauses",id:"clauses",children:[{value:"Condition clauses",id:"condition-clauses",children:[]},{value:"Ordering clauses",id:"ordering-clauses",children:[]},{value:"Multiple clauses",id:"multiple-clauses",children:[]}]},{value:"<code>Presenter</code> instance",id:"presenter-instance",children:[{value:"Dependency injection",id:"dependency-injection",children:[]},{value:"Providing collections",id:"providing-collections",children:[]}]}],c={toc:l};function p(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Presenters are Access' way to serialize entities and collection to something you\ncan send over the wire with ",Object(i.b)("inlineCode",{parentName:"p"},"json_encode"),". To be more specific, it converts\nentities to ",Object(i.b)("inlineCode",{parentName:"p"},"array"),"s and because collections are basically lists of entities,\nthose get converted to ",Object(i.b)("inlineCode",{parentName:"p"},"array"),"s of ",Object(i.b)("inlineCode",{parentName:"p"},"array"),"s."),Object(i.b)("p",null,"But why, you might ask, not just use ",Object(i.b)("inlineCode",{parentName:"p"},"\\JsonSerializable")," for this? Presenters\nadd a layer inbetween the entity and the resulting array to allow for more\nconfiguration and flexibility. For example, for different reasons you might want\nto expose different fields of a single entity. And, by using the extra layer\nAccess can provide a lot of helper methods to convert your entities with ease,\nincluding, but not limited to, solving the ",Object(i.b)("inlineCode",{parentName:"p"},"n+1")," problem for nested entities."),Object(i.b)("h2",{id:"simple-entity-presenter"},"Simple entity presenter"),Object(i.b)("p",null,"To start simple you need to create a class that extends the ",Object(i.b)("inlineCode",{parentName:"p"},"EntityPresenter"),",\nand implement two methods. One to tell which entity is associated with this\npresenter (",Object(i.b)("inlineCode",{parentName:"p"},"getEntityKlass"),") and the other to do the converting (",Object(i.b)("inlineCode",{parentName:"p"},"fromEntity"),")."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Presenter\\EntityPresenter;\n\nclass UserPresenter extends EntityPresenter\n{\n    /**\n     * Get the entity class associated with this presenter\n     */\n    public static function getEntityKlass(): string\n    {\n        return User::class;\n    }\n\n    /**\n     * Convert entity to an array\n     */\n    public function fromEntity(Entity $user): ?array\n    {\n        return [\n            'id' => $user->getId(),\n        ]\n    }\n}\n")),Object(i.b)("p",null,"To use this presenter you need the ",Object(i.b)("a",{parentName:"p",href:"database"},Object(i.b)("inlineCode",{parentName:"a"},"Access\\Database"))," instance and\ncall ",Object(i.b)("inlineCode",{parentName:"p"},"presentEntity"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// get a user from somewhere\n$user = $db->findOne(User::class, 1);\n\n$result = $db->presentEntity(UserPresenter::class, $user);\n\n// =>\n[\n    'id' => 1,\n];\n")),Object(i.b)("p",null,"As you might have noticed, the return type of the ",Object(i.b)("inlineCode",{parentName:"p"},"fromEntity")," method is\n",Object(i.b)("inlineCode",{parentName:"p"},"?array"),", indicating that it is possible to return ",Object(i.b)("inlineCode",{parentName:"p"},"null"),". Returning ",Object(i.b)("inlineCode",{parentName:"p"},"null"),"\ncould help in cases where you don't want to output the entity, based on some\nkind of logic. For example, you never want to return admin users from your\nentity presenter, just return ",Object(i.b)("inlineCode",{parentName:"p"},"null")," when the user is an admin and the presenter\nwill completely filter out the user. This is more useful when you have a list of\nusers and want to filter some out."),Object(i.b)("h2",{id:"collection-presenters"},"Collection presenters"),Object(i.b)("p",null,"Presenting a collection uses the same presenter as the entity, it just executes\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"fromEntity")," multiple times and puts them in an ",Object(i.b)("inlineCode",{parentName:"p"},"array"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// get a list of users from somewhere\n$users = $db->getRepository(User::class)->findAllCollection();\n\n$result = $db->presentCollection(UserPresenter::class, $users);\n\n// =>\n[\n    [\n        'id' => 1,\n    ],\n    [\n        'id' => 2,\n    ],\n    // ..\n];\n")),Object(i.b)("h2",{id:"nested-presenters"},"Nested presenters"),Object(i.b)("p",null,"To make things more interesting, we need create another presenter, this time for\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"Project")," entity. This ",Object(i.b)("inlineCode",{parentName:"p"},"ProjectPresenter")," presenter references another\npresenter by using ",Object(i.b)("inlineCode",{parentName:"p"},"present()"),", you need to provide the presenter you want to\nuse for your field and the ID of the entity. Calling the ",Object(i.b)("inlineCode",{parentName:"p"},"present"),' method does\nnot really do anything, it merely saves the needed information and "marks" the\nlocation in the result. The presenter will then lookup all the "markers", fetch\nthe needed entities in a single query and resolve all the markers with the\nresult of entity presenter.'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Presenter\\EntityPresenter;\n\nclass ProjectPresenter extends EntityPresenter\n{\n    public static function getEntityKlass(): string\n    {\n        return Project::class;\n    }\n\n    public function fromEntity(Entity $project): ?array\n    {\n        return [\n            'id' => $project->getId(),\n            'owner' => $this->present(UserPresenter::class, $project->getOwnerId()),\n        ]\n    }\n}\n")),Object(i.b)("p",null,"Executing this entity presenter will automatically create a ",Object(i.b)("inlineCode",{parentName:"p"},"UserPresenter"),", fetch\nthe associated ",Object(i.b)("inlineCode",{parentName:"p"},"User")," entity with the ID coming from ",Object(i.b)("inlineCode",{parentName:"p"},"getOwnerId"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// get a project from somewhere\n$project = $db->findOne(Project::class, 1);\n\n$result = $db->presentEntity(ProjectPresenter::class, $project);\n\n// =>\n[\n    'id' => 1,\n    'owner' => [\n        'id' => 1,\n    ],\n];\n")),Object(i.b)("p",null,"The underlying presenter fetches the needed ",Object(i.b)("inlineCode",{parentName:"p"},"User")," entity based on the mark left\nmy ",Object(i.b)("inlineCode",{parentName:"p"},"present"),". This case it is obvious that done with a single query, but this\nscales to using this entity presenter for collections as well."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// get a list of projects from somewhere\n$projects = $db->getRepository(Project::class)->findAllCollection();\n\n$result = $db->presentCollection(ProjectPresenter::class, $projects);\n\n// =>\n[\n    [\n        'id' => 1,\n        'owner' => [\n            'id' => 1,\n        ],\n    ],\n    [\n        'id' => 2,\n        'owner' => [\n            'id' => 2,\n        ],\n    ],\n    // ..\n];\n")),Object(i.b)("p",null,"This is also done with a single query; all the marks are collected, then the\nentities are fetched in one go and after that the markers are replaced with the\nresult of the ",Object(i.b)("inlineCode",{parentName:"p"},"fromEntity")," of the associated entity presenter. It is possible\nthat that result also contains a bunch of marker, like the profile image of the\nowner, for example. The presenter will keep resolving the markers for as long as\nthe are there. Adding a profile image from another entity presenter would only\nincrease the number of queries with one."),Object(i.b)("p",null,"Of course ",Object(i.b)("inlineCode",{parentName:"p"},"present")," is a little bit limited, it only works for ",Object(i.b)("inlineCode",{parentName:"p"},"has-one"),"\nrelations. The ",Object(i.b)("inlineCode",{parentName:"p"},"EntityPresenter")," provides a bunch more methods to resolve more\ncomplicated relations as well."),Object(i.b)("h3",{id:"has-many-relation"},Object(i.b)("inlineCode",{parentName:"h3"},"has-many")," relation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Presenter\\EntityPresenter;\n\nclass UserWithProjectsPresenter extends EntityPresenter\n{\n    public static function getEntityKlass(): string\n    {\n        return User::class;\n    }\n\n    public function fromEntity(Entity $user): ?array\n    {\n        return [\n            'id' => $user->getId(),\n            'projects' => $this->presentMultipleInversedRefs(\n                UserPresenter::class, // entity presenter\n                'owner_id', // field name linking the user to the projects\n                $user->getId(), // value of the field\n            ),\n        ]\n    }\n}\n")),Object(i.b)("p",null,"In the background this will do a query to fetch all the projects needed to\nresolve these markers, something like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM `projects` WHERE `owner_id` IN (:userId)\n")),Object(i.b)("p",null,"When there are multiple markers that need to be resolved, the query stays the\nsame, but will include all user IDs that are needed. Then the result is split\nwhen the markers are resolved."),Object(i.b)("p",null,"This entity presenter can be used just like any other."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// get a user from somewhere\n$user = $db->findOne(User::class, 1);\n\n$result = $db->presentEntity(UserWithProjectsPresenter::class, $user);\n\n// =>\n[\n    'id' => 1,\n    'projects' => [\n        [\n            'id' => 1,\n            'owner' => [\n                'id' => 1,\n            ],\n        ],\n    ],\n];\n")),Object(i.b)("p",null,"As you can see the ",Object(i.b)("inlineCode",{parentName:"p"},"owner")," field of the project is also filled, as that entity\npresenter uses ",Object(i.b)("inlineCode",{parentName:"p"},"UserPresenter"),". This feature is very powerfu, you can easily\ncreate more complex entity presenters by composing them together. Keep in mind,\nthough, to prevent circular entity presenters. This will throw an exception."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Avoid circular entity presenters")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"This will completely blow up with an ",Object(i.b)("inlineCode",{parentName:"p"},"Access\\Exception"),"."))),Object(i.b)("p",null,"You can prevent the circular entity presenters is by creating a completely new\none for every need, like we did in our example from above. We created a new\n",Object(i.b)("inlineCode",{parentName:"p"},"UserWithProjectsPresenter")," entity presenter to prevent the circular entity\npresenter."),Object(i.b)("h2",{id:"clauses"},"Clauses"),Object(i.b)("p",null,'Even though it is possible to do some manipulation with the future helpers,\nthis can be cumbersome when you only want to sort them, or filter on an extra\nfield. That\'s were the optional clauses come into play. You can add an extra\nclause to some of the helper methods to provide that extra functionality to the\nmarker. Currently there are two kinds of clauses that you can use, a condition\nto filter on an extra field or ordering the results for the "multiple" helpers.'),Object(i.b)("h3",{id:"condition-clauses"},"Condition clauses"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Presenter\\EntityPresenter;\nuse Access\\Clause;\n\nclass UserWithPublishedProjectsPresenter extends EntityPresenter\n{\n    public static function getEntityKlass(): string\n    {\n        return User::class;\n    }\n\n    public function fromEntity(Entity $user): ?array\n    {\n        return [\n            'id' => $user->getId(),\n            'publishedProjects' => $this->presentMultipleInversedRefs(\n                UserPresenter::class, // entity presenter\n                'owner_id', // field name linking the user to the projects\n                $user->getId(), // value of the field\n                new Clause\\Condition\\Equals('status', 'PUBLISHED'),\n            ),\n        ]\n    }\n}\n")),Object(i.b)("p",null,"This will only add projects to the ",Object(i.b)("inlineCode",{parentName:"p"},"'publishedProjects'")," list that are published\n(",Object(i.b)("inlineCode",{parentName:"p"},"status = 'PUBLISHED'"),")."),Object(i.b)("p",null,"There are a whole bunch of conditions you can use and their names speak for\nthemselves."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clauses\\Condition\\Equals")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clauses\\Condition\\GreaterThan")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clauses\\Condition\\GreaterThanOrEquals")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clauses\\Condition\\IsNotNull")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clauses\\Condition\\IsNull")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clauses\\Condition\\LessThen")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clauses\\Condition\\LessThanOrEquals")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clauses\\Condition\\NotEquals"))),Object(i.b)("h3",{id:"ordering-clauses"},"Ordering clauses"),Object(i.b)("p",null,"To order the projects you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"Access\\Clause\\OrderBy")," clauses."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Presenter\\EntityPresenter;\nuse Access\\Clause;\n\nclass UserWithOrderedProjectsPresenter extends EntityPresenter\n{\n    public static function getEntityKlass(): string\n    {\n        return User::class;\n    }\n\n    public function fromEntity(Entity $user): ?array\n    {\n        return [\n            'id' => $user->getId(),\n            'publishedProjects' => $this->presentMultipleInversedRefs(\n                UserPresenter::class, // entity presenter\n                'owner_id', // field name linking the user to the projects\n                $user->getId(), // value of the field\n                new Clause\\OrderBy\\Ascending('name'),\n            ),\n        ]\n    }\n}\n")),Object(i.b)("p",null,"There are only two order by clauses:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clause\\OrderBy\\Ascending")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Access\\Clause\\OrderBy\\Descending"))),Object(i.b)("h3",{id:"multiple-clauses"},"Multiple clauses"),Object(i.b)("p",null,"And if you want to mix multiple clauses together, if, for example, you want the\nlist to contain published projects and also want to order them. The special\n",Object(i.b)("inlineCode",{parentName:"p"},"Access\\Clauses\\Multiple")," clause will help you here, if combines multiple\nconditions together and all conditions need to be true. Or if you provide\nmultiple order by clauses they all will be used (you can sorting on status and\nthen on name, for example). There is also the ",Object(i.b)("inlineCode",{parentName:"p"},"Access\\Clauses\\MultipleOr")," clause\nif you want only one of the condition clauses to be true. You can add as many\nclauses to the ",Object(i.b)("inlineCode",{parentName:"p"},"Multiple")," as you like, and you can mix order by and condition\nclauses."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Presenter\\EntityPresenter;\nuse Access\\Clause;\n\nclass UserWithOrderedPublishedProjectsPresenter extends EntityPresenter\n{\n    public static function getEntityKlass(): string\n    {\n        return User::class;\n    }\n\n    public function fromEntity(Entity $user): ?array\n    {\n        return [\n            'id' => $user->getId(),\n            'publishedProjects' => $this->presentMultipleInversedRefs(\n                UserPresenter::class, // entity presenter\n                'owner_id', // field name linking the user to the projects\n                $user->getId(), // value of the field\n                new Clause\\Multiple()\n                    new Clause\\Condition\\Equals('status', 'PUBLISHED'),\n                    new Clause\\OrderBy\\Ascending('name'),\n                ),\n            ),\n        ]\n    }\n}\n")),Object(i.b)("h2",{id:"presenter-instance"},Object(i.b)("inlineCode",{parentName:"h2"},"Presenter")," instance"),Object(i.b)("h3",{id:"dependency-injection"},"Dependency injection"),Object(i.b)("p",null,"Sometimes you need a bit more information than just the entity you are\nconverting, like some service to generate URLs. The presenter functions like a\nrudimentary dependency container. First you need access to the ",Object(i.b)("inlineCode",{parentName:"p"},"Presenter")," that\nis used for the actual presenting, so far we've only looked at the shortcuts to\nskip creating a ",Object(i.b)("inlineCode",{parentName:"p"},"Presenter"),". To get an presenter you can just call\n",Object(i.b)("inlineCode",{parentName:"p"},"createPresenter")," on the ",Object(i.b)("a",{parentName:"p",href:"database"},"database")," instance."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// result an `Access\\Presenter`\n$presenter = $db->createPresenter();\n")),Object(i.b)("p",null,"This presenter instance provides the same methods to do the actual presenting as\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"Database")," instance, ",Object(i.b)("inlineCode",{parentName:"p"},"presentEntity")," and ",Object(i.b)("inlineCode",{parentName:"p"},"presentCollection"),". But, there are\nalso some extra methods to prepare your presenting work for a bit more heavy\nlifting."),Object(i.b)("p",null,"First up, you can add a dependency to the presenter that your entity presenters\ncan use."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// get a URL service somewhere\n// for our exmple, this is an `App\\UrlService` object\n$urlService = $this->getSomeUrlService();\n\n$presenter = $db->createPresenter();\n$presenter->addDependency($urlService);\n")),Object(i.b)("p",null,"Now your presenter a reference to the URL service, but on its own nothing\nhappens. We need a way for the entity presenters to access this dependency.\nDependencies are injected into the constructor of the entity presenter and are\nmatched on type."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"use Access\\Presenter\\EntityPresenter;\n\nclass UserWithExternalUrlPresenter extends EntityPresenter\n{\n    private App\\UrlService $urlService;\n\n    public function __construct(App\\UrlService $urlService)\n    {\n        $this->urlService = $urlService;\n    }\n\n    // .. get presenter class\n\n    public function fromEntity(Entity $user): ?array\n    {\n        return [\n            'id' => 1,\n            'externalUrl' => $this->urlService->generate($user),\n        ];\n    }\n}\n")),Object(i.b)("p",null,"Dependencies are only injected into entity presenters with an constructor and\nthe order of dependencies does not matter. And your entity can also mark the\ndependency as optional with a default value for the constructor argument.\nOtherwise the presenter will throw an exception when a dependency is not\navailable."),Object(i.b)("h3",{id:"providing-collections"},"Providing collections"),Object(i.b)("p",null,"In some cases you already know which entities are needed to resolve some\nmarkers, when, for example, you already fetched those entities to does some\ncalculations. In this case you don't what to fetch them again when there is a\nmarker for one of those entities. You can add those entities as a collection to\nthe presenter for future use with ",Object(i.b)("inlineCode",{parentName:"p"},"provideCollection"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// the some users from somewhere\n$users = $db->getRepository(User::class)->findAllCollection();\n\n// get a project from somewhere\n$project = $db->findOne(Project::class, 1);\n\n$presenter = $db->createPresenter();\n$presenter->provideCollection(User::class, $users);\n\n$result = $presenter->presentEntity(ProjectPresenter::class, $project);\n")),Object(i.b)("p",null,"This will ",Object(i.b)("em",{parentName:"p"},"not")," does additional queries to fetch the user needed for the owner\nmarker in the ",Object(i.b)("inlineCode",{parentName:"p"},"ProjectPresenter")," entity presenter. Unless, of course, the\nspecific user is not available in the collection; in that case an addition query\nwill be executed."))}p.isMDXComponent=!0},88:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var r=t(0),s=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=s.a.createContext({}),p=function(e){var n=s.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return s.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},b=s.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),b=r,h=u["".concat(a,".").concat(b)]||u[b]||d[b]||i;return t?s.a.createElement(h,o(o({ref:n},c),{},{components:t})):s.a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=b;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var c=2;c<i;c++)a[c]=t[c];return s.a.createElement.apply(null,a)}return s.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);